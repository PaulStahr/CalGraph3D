plugins {
    id 'java'
    id 'maven'
    id 'application'
    id 'cpp'
}

apply plugin: 'cpp'

allprojects{
    repositories {
        maven {url "https://plugins.gradle.org/m2/"}
        maven {url "https://jitpack.io"}
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.jdom:jdom:2.0.2'
    implementation 'com.hynnet:logback-core:1.1.3'
    implementation 'com.hynnet:logback-classic:1.1.3'
    implementation 'org.jogamp.jogl:jogl-all:2.3.2'
    implementation 'org.jogamp.gluegen:gluegen-rt:2.3.2'
    implementation 'net.imagej:pom-imagej:14.1.0'
    implementation 'org.lwjgl:lwjgl:3.2.2'
    implementation 'org.lwjgl:lwjgl-opengl:3.2.2'
    implementation 'org.lwjgl:lwjgl-glfw:3.2.2'
    implementation 'org.lwjglx:lwjgl3-awt:0.1.8'
    compile group: 'org.lwjgl', name: 'lwjgl-tinyexr', version: '3.2.2'
    implementation 'com.github.PaulStahr:JSymMath:3ea541d02b'
    compile files("./src/ij.jar")

    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
}

mainClassName = 'main.Main'
sourceSets.main.java.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['src/test']
sourceSets.main.resources.srcDirs= ["src"]
sourceSets.main.resources.includes = [ "**/*.so", "**/*.xml" ]


jar {
    destinationDir = file('./')
    manifest {
        attributes 'Main-Class': 'main.Main'
    }
    from {configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// To specify a license in the pom:
install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'MIT License'
          url 'https://opensource.org/licenses/MIT'
          distribution 'repo'
        }
      }
    }
  }
}
